// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createOrders = `-- name: CreateOrders :exec
INSERT INTO Orders(
        ID,
        UserId,
        Amount,
        AccountNumber,
        Currency,
        Description,
        Status
    )
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateOrdersParams struct {
	ID            int32         `json:"id"`
	Userid        int32         `json:"userid"`
	Amount        sql.NullInt32 `json:"amount"`
	Accountnumber string        `json:"accountnumber"`
	Currency      string        `json:"currency"`
	Description   string        `json:"description"`
	Status        string        `json:"status"`
}

func (q *Queries) CreateOrders(ctx context.Context, arg CreateOrdersParams) error {
	_, err := q.db.ExecContext(ctx, createOrders,
		arg.ID,
		arg.Userid,
		arg.Amount,
		arg.Accountnumber,
		arg.Currency,
		arg.Description,
		arg.Status,
	)
	return err
}

const getOrderByOrderId = `-- name: GetOrderByOrderId :one
SELECT id, userid, amount, accountnumber, currency, description, createdat, updatedat, status
FROM Orders
WHERE ID = ?
LIMIT 1
`

func (q *Queries) GetOrderByOrderId(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByOrderId, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Amount,
		&i.Accountnumber,
		&i.Currency,
		&i.Description,
		&i.Createdat,
		&i.Updatedat,
		&i.Status,
	)
	return i, err
}

const getOrderByUserId = `-- name: GetOrderByUserId :one
SELECT id, userid, amount, accountnumber, currency, description, createdat, updatedat, status
FROM Orders
WHERE UserId = ?
    AND ID = ?
LIMIT 1
`

type GetOrderByUserIdParams struct {
	Userid int32 `json:"userid"`
	ID     int32 `json:"id"`
}

func (q *Queries) GetOrderByUserId(ctx context.Context, arg GetOrderByUserIdParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByUserId, arg.Userid, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Amount,
		&i.Accountnumber,
		&i.Currency,
		&i.Description,
		&i.Createdat,
		&i.Updatedat,
		&i.Status,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE Orders
SET Status = ?
where ID = ?
`

type UpdateOrderStatusParams struct {
	Status string `json:"status"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
